{"version":3,"sources":["GameHeader.js","MakeCard.js","Inform.js","GameCards.js","App.js","reportWebVitals.js","index.js"],"names":["GameHeader","props","className","score","bestScore","onClick","resetGame","MakeCard","useState","isClicked","setIsClicked","useEffect","setGameOver","changeScore","shuffleCards","src","image","alt","Inform","msg","level","GameCards","images","setImages","isLoading","setIsLoading","gameOver","getImages","cards","then","setTimeout","resetScore","console","log","newImages","i","length","temp","j","Math","floor","random","class","map","numberOfImages","a","makeURL","url","fetch","method","mode","headers","redirect","data","json","num","imageRangeString","String","App","setScore","setCards","setBestScore","setLevel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3366ff7.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function GameHeader(props){\n  return(\n    <main className=\"gameheader\">\n      <h1>Rick and Morty Memory Cards</h1>\n    <div>\n      <span>Score: {props.score}</span>\n      <span>BestScore: {props.bestScore}</span>\n      <button onClick={() => {props.resetGame();}}>Restart Game</button>\n    </div>\n    </main>\n  )\n}\n","import React, { useState, useEffect } from \"react\";\n\nexport default function MakeCard(props){\n  let [isClicked, setIsClicked] = useState(false);\n\n  useEffect(() => {\n    if(props.score === 0)\n      setIsClicked(false);\n  }, [props.bestScore, props.score])\n\n  const handleClickOnImage = () => {\n    if(isClicked){\n      props.setGameOver(true);\n    }else{\n      props.changeScore();\n      setIsClicked(true);\n    }\n    props.shuffleCards();\n  }\n  return(\n    <div>\n    <img \n    onClick={handleClickOnImage}\n    src={props.image} \n    alt={props.image}/> \n    </div>\n  )\n}\n","import React from \"react\";\n\nexport default function Inform(props){\n  return(\n    <div className=\"loading\">\n      <h1>{props.msg}{props.level}</h1>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\n\nimport MakeCard from './MakeCard.js';\nimport Inform from './Inform.js'\n\nexport default function GameCards(props){\n  const [images, setImages] = useState([{}]); \n  const [isLoading, setIsLoading] = useState(true);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getImages(props.cards)\n      .then((images) => {\n        setImages(images)\n        setTimeout(() => setIsLoading(false), 200);\n        // setIsLoading(false);\n      });\n  }, [props.cards]);\n\n  useEffect(() => {\n    if(gameOver === true){\n      props.resetScore();\n    }\n  }, [gameOver]);\n\n  useEffect(() => {\n    if(gameOver === true)\n      setTimeout(() => {\n        setGameOver(false);\n      }, 300)\n  }, [props.bestScore, props.score]);\n\n  const shuffleCards = () => {\n    console.log(\"clicked\");\n    let newImages = [...images];\n    for(let i = newImages.length - 1; i >= 0; i--){\n      let temp, j;\n      j = Math.floor(Math.random() * i);\n      temp = newImages[i];\n      newImages[i] = newImages[j];\n      newImages[j] = temp;\n    }\n    setImages(newImages);\n    console.log(\"newImages: \", images);\n  }\n\n  if(gameOver){\n    return(\n      <Inform \n        msg=\"GameOver\"\n        level=\"\"\n      />\n    )\n  }else if(isLoading){\n    return(\n      <Inform \n        msg=\"Level: \"\n        level={props.level}\n      />\n    )\n  }else{\n    return(\n      <div class=\"GameCards\">\n      {images.map((image) => \n        <MakeCard\n          image={image.src}\n          key={image.src}\n          shuffleCards={shuffleCards}\n          score={props.score}\n          bestScore={props.bestScore}\n          changeScore={props.changeScore}\n          resetScore={props.resetScore}\n          setGameOver={setGameOver}\n        />\n      )}\n      </div>\n    )\n  }\n}\n\nasync function getImages(numberOfImages){\n  let url = await makeURL(numberOfImages);\n  let data = await fetch(url, {\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    redirect: 'follow'\n  });\n  data = await data.json();\n  let images = data.map((data) => {\n    return {\n      src: data.image,\n      isClicked: false\n    }\n  });\n  console.log(images);\n  return images;\n}\n\nasync function makeURL(num){\n  let url = 'https://rickandmortyapi.com/api/character/';\n  let imageRangeString = '';\n  for(let i = 1; i <= num; i++){\n    imageRangeString = imageRangeString + \",\" + String(i); \n  }\n  url += imageRangeString;\n  console.log(url)\n  return url\n}\n","import React, { useState, useEffect } from \"react\";\nimport './App.css';\n\nimport GameHeader from './GameHeader.js';\nimport GameCards from './GameCards.js';\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [cards, setCards] = useState(4);\n  const [bestScore, setBestScore] = useState(0);\n  const [level, setLevel] = useState(1);\n\n  useEffect(() => {\n    if(score === cards){\n      resetScore();\n    }\n  }, [score]); \n\n  const changeScore = () => {\n    if(score < cards){\n      setScore(score + 1);\n    }\n    else{\n      resetScore();\n    }\n  }\n\n  const resetScore = () => {\n    if(bestScore < score){\n      setBestScore(score);\n      if(score === cards){\n        setLevel(level + 1);\n        setCards(cards + 4);\n      }\n    }    \n    setScore(0);\n  }\n\n  const resetGame = () => {\n    setScore(0);\n    setBestScore(0);\n    setLevel(1);\n    setCards(4);\n  }\n\n  return (\n    <>\n      <GameHeader \n        score={score} \n        bestScore={bestScore}\n        level={level}\n        resetGame={resetGame}\n      />\n      <GameCards \n        cards={cards} \n        score={score} \n        changeScore={changeScore} \n        bestScore={bestScore}\n        resetScore={resetScore}\n        level={level}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}